{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/positions.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LineMap from './linemap.js';\nimport './App.css';\n\nconst PositionMap = props => {\n  const [positions, setPositions] = useState(null);\n  const [lineCode, setLineCode] = useState('BL');\n  const [currentLine, setCurrentLine] = useState(null);\n  const [trainLocations, setTrainLocations] = useState(null);\n  const [finalDict, setFinalDict] = useState(null);\n  const [lineData, setLineData] = useState(null);\n  const [lineName, setLineName] = useState(null);\n  const [lineRoute, setLineRoute] = useState([]);\n  const [currentStation, setCurrentStation] = useState(null);\n  const [incidentList, setIncidentList] = useState([]);\n  const [finalIncidentList, setFinalIncidentList] = useState([]);\n  useEffect(() => {\n    document.getElementById(\"lineMapParent\").style.display = 'inherit';\n  });\n  useEffect(() => {\n    if (props.lineMap) {\n      axios.get(`${process.env.REACT_APP_LINE_API}?api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n        var lineArray = data.data.Lines;\n        lineArray.map(line => {\n          if (line.LineCode === props.lineMap) {\n            setLineName(line.DisplayName);\n            setLineData(line);\n          }\n        });\n      });\n    }\n  }, [props.lineMap]);\n  useEffect(() => {\n    if (props.currentStation) {\n      setCurrentStation(props.currentStation);\n    }\n  }, [props.currentStation]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_INCIDENT_API}?api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n      setIncidentList(data.data.Incidents);\n    });\n  }, []);\n  useEffect(() => {\n    if (lineData) {\n      var station1 = lineData.StartStationCode;\n      var station2 = lineData.EndStationCode;\n      axios.get(`${process.env.REACT_APP_STATION_PATH_API}?FromStationCode=${station1}&ToStationCode=${station2}&api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n        setLineRoute(data.data.Path);\n        console.log(data.data.Path);\n      });\n    }\n  }, [lineData]);\n\n  function getCustomColor(line) {\n    switch (line) {\n      case 'RD':\n        return '#f76f6f';\n\n      case 'BL':\n        return '#8fc1ff';\n\n      case 'OR':\n        return '#ff9900';\n\n      case 'GR':\n        return '#abd1af';\n\n      case 'SV':\n        return '#c2c2c2';\n\n      case 'YL':\n        return '#ffe999';\n    }\n  }\n\n  useEffect(() => {\n    if (props.lineMap && incidentList) {\n      const incidentArray = [];\n      var line = props.lineMap;\n      incidentList.map(incident => {\n        if (incident.LinesAffected.includes(line)) {\n          if (!incidentArray.includes(incident.Description)) {\n            console.log('mango');\n            incidentArray.push(incident.Description);\n          }\n        }\n      });\n      setFinalIncidentList(incidentArray);\n    }\n  }, [incidentList, props.lineMap]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_POSITION_API}StandardRoutes?contentType=json&api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n      setPositions(data.data.StandardRoutes);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_TRAIN_POSITION_API}?contentType=json&api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n      console.log('curr pos loc', data);\n      setTrainLocations(data.data.TrainPositions);\n    });\n  }, []);\n  useEffect(() => {\n    if (positions && lineCode) {\n      positions.map(line => {\n        if (line.LineCode === lineCode) {\n          setCurrentLine(line);\n          console.log('blah', line);\n        }\n      });\n    }\n  }, [lineCode, positions]);\n  useEffect(() => {\n    if (currentLine) {\n      var final_dict = {};\n      var station_dict = {};\n      var count = 0;\n      var temp = [];\n      currentLine.TrackCircuits.map(point => {\n        count += 1;\n\n        if (point.StationCode !== null) {\n          station_dict[point.CircuitId] = count;\n          temp.map(id => {\n            station_dict[id] = count;\n          });\n          temp = [];\n          count = 0;\n        } else {\n          temp.push(point.CircuitId);\n        }\n      });\n      var count2 = 0;\n      var temp2 = [];\n      currentLine.TrackCircuits.map(point => {\n        count2 += 1;\n        final_dict[point.CircuitId] = [count2, station_dict[point.CircuitId], point.StationCode];\n\n        if (point.StationCode !== null) {\n          count2 = 0;\n          temp2.map(id => {\n            final_dict[id][2] = point.StationCode;\n          });\n          temp2 = [];\n        } else {\n          temp2.push(point.CircuitId);\n        }\n      });\n      console.log(final_dict);\n      setFinalDict(final_dict);\n    }\n  }, currentLine);\n  /*  useEffect(() => {\n        console.log('calling thjis thing')\n        if(trainLocations && positions){\n            currentLine.TrackCircuits.map((point) => {\n                trainLocations.map((train) => {\n                    \n                    var blah = point.CircuitId\n                    var blah2 = point.StationCode ? point.StationCode : ''\n                    var blah3 = point.CircuitId === train.CircuitId ? \"train\" : ''\n                     //console.log(blah, blah2, blah3)\n                })\n             })\n          }\n     }, [trainLocations])*/\n\n  function fetchPositionData() {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"This is the psoitons map\"), trainLocations && finalDict && trainLocations.map(train => {\n    var data = finalDict[train.CircuitId];\n    console.log('data from train', data);\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"lineMapParent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"double_bottom_space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 54\n    }\n  }, \"Map of the \", lineName, \" line\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, \"Incidents on this line:\"), finalIncidentList.length && finalIncidentList.map(incident => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spaceTop incident spaceBottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }\n    }, incident);\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  })), lineRoute.length && lineRoute.map((stop, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row vertical_align\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"stopIconBorder centerContent vertical_center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: getCustomColor(stop.LineCode)\n      },\n      className: \"stopIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 33\n      }\n    })), currentStation && currentStation === stop.StationCode ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spaceLeft medTitle spaceTop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 78\n      }\n    }, stop.StationName)) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spaceLeft  spaceTop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 33\n      }\n    }, stop.StationName)), i === lineRoute.length - 1 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 55\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"stopLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 88\n      }\n    }));\n  })));\n};\n\nexport default PositionMap;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/positions.js"],"names":["React","useEffect","useState","axios","LineMap","PositionMap","props","positions","setPositions","lineCode","setLineCode","currentLine","setCurrentLine","trainLocations","setTrainLocations","finalDict","setFinalDict","lineData","setLineData","lineName","setLineName","lineRoute","setLineRoute","currentStation","setCurrentStation","incidentList","setIncidentList","finalIncidentList","setFinalIncidentList","document","getElementById","style","display","lineMap","get","process","env","REACT_APP_LINE_API","REACT_APP_SECRET","then","data","lineArray","Lines","map","line","LineCode","DisplayName","REACT_APP_INCIDENT_API","Incidents","station1","StartStationCode","station2","EndStationCode","REACT_APP_STATION_PATH_API","Path","console","log","getCustomColor","incidentArray","incident","LinesAffected","includes","Description","push","REACT_APP_POSITION_API","StandardRoutes","REACT_APP_TRAIN_POSITION_API","TrainPositions","final_dict","station_dict","count","temp","TrackCircuits","point","StationCode","CircuitId","id","count2","temp2","fetchPositionData","train","length","stop","i","backgroundColor","StationName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LineMap from './linemap.js'\nimport './App.css';\n\n\nconst PositionMap = props => {\n\n    const [positions, setPositions] = useState(null)\n    const [lineCode, setLineCode] = useState('BL')\n    const [currentLine, setCurrentLine] = useState(null)\n    const [trainLocations, setTrainLocations] = useState(null)\n    const [finalDict, setFinalDict] = useState(null)\n\n    const [lineData, setLineData] = useState(null)\n    const [lineName, setLineName] = useState(null)\n    const [lineRoute, setLineRoute] = useState([])\n    const [currentStation, setCurrentStation] = useState(null)\n    const [incidentList, setIncidentList] = useState([])\n    const [finalIncidentList, setFinalIncidentList] = useState([])\n\n    useEffect(() =>{\n        document.getElementById(\"lineMapParent\").style.display = 'inherit'\n\n    })\n\n\n    useEffect(() => {\n        if(props.lineMap){\n            axios.get(`${process.env.REACT_APP_LINE_API}?api_key=${process.env.REACT_APP_SECRET}`)\n            .then(data => {\n                var lineArray = data.data.Lines\n                lineArray.map((line) => {\n                    if (line.LineCode === props.lineMap){\n                        setLineName(line.DisplayName)\n                        setLineData(line)\n                    \n                    }  \n                })\n            })\n        }\n    }, [props.lineMap])\n\n    useEffect(()=>{\n        if(props.currentStation){\n            setCurrentStation(props.currentStation)\n        }\n    }, [props.currentStation])\n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_INCIDENT_API}?api_key=${process.env.REACT_APP_SECRET}`)\n         .then((data) => {\n           setIncidentList(data.data.Incidents)\n         })\n      }, [])\n\n\n    useEffect(() => {\n        if(lineData){\n            var station1 = lineData.StartStationCode\n            var station2 = lineData.EndStationCode\n            axios.get(`${process.env.REACT_APP_STATION_PATH_API}?FromStationCode=${station1}&ToStationCode=${station2}&api_key=${process.env.REACT_APP_SECRET}`)\n            .then(data => {\n                setLineRoute(data.data.Path)\n                console.log(data.data.Path)\n\n            })\n        }\n    }, [lineData])\n\n    function getCustomColor(line) {\n        switch(line) {\n          case 'RD':\n            return '#f76f6f'\n          case 'BL':\n            return '#8fc1ff'\n          case 'OR':\n            return '#ff9900'\n          case 'GR':\n            return '#abd1af'\n          case 'SV':\n            return '#c2c2c2'\n          case 'YL':\n            return '#ffe999'\n        }\n      }\n\n\n    useEffect(() => {\n        if (props.lineMap && incidentList){\n            const incidentArray = []\n            var line = props.lineMap\n            incidentList.map((incident) => {\n                if(incident.LinesAffected.includes(line)){\n                    if (!incidentArray.includes(incident.Description)){\n                        console.log('mango')\n\n                        incidentArray.push(incident.Description)\n                    }\n                }\n            })\n            setFinalIncidentList(incidentArray)\n        }\n    }, [incidentList, props.lineMap])\n\n\n\n\n\n    \n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_POSITION_API}StandardRoutes?contentType=json&api_key=${process.env.REACT_APP_SECRET}`)\n         .then((data) => {\n           setPositions(data.data.StandardRoutes)\n         })\n      }, [])\n\n      useEffect(() => {\n          axios.get(`${process.env.REACT_APP_TRAIN_POSITION_API}?contentType=json&api_key=${process.env.REACT_APP_SECRET}`)\n          .then((data) => {\n              console.log('curr pos loc', data)\n              setTrainLocations(data.data.TrainPositions)\n          })\n      }, [])\n\n    useEffect(() => {\n        if(positions && lineCode) {\n            positions.map((line) => {\n                if (line.LineCode === lineCode){\n                    setCurrentLine(line)\n                    console.log('blah', line)\n\n                }\n            })\n        }\n    }, [lineCode, positions])\n\n    useEffect(() => {\n\n        if (currentLine){\n            var final_dict = {}\n            var station_dict = {}\n\n            var count = 0\n            var temp = []\n            currentLine.TrackCircuits.map((point) => {\n                count += 1\n                if (point.StationCode !== null){\n                    station_dict[point.CircuitId] = count\n\n                    temp.map((id) => {\n                        station_dict[id] = count\n                    })\n                    temp = []\n                    count = 0\n                }\n                else{\n                    temp.push(point.CircuitId)\n                }\n            })\n            var count2 = 0\n            var temp2 = []\n            currentLine.TrackCircuits.map((point) => {\n                count2 += 1\n                final_dict[point.CircuitId] = [count2, station_dict[point.CircuitId], point.StationCode] \n                if (point.StationCode !== null){\n                    count2 = 0\n                    temp2.map((id) => {\n                        final_dict[id][2] = point.StationCode\n                    })\n                    temp2 = []\n                }\n                else{\n                    temp2.push(point.CircuitId)\n                }\n                \n            })\n            console.log(final_dict)\n            setFinalDict(final_dict)\n        }\n    }, currentLine)\n\n\n\n  /*  useEffect(() => {\n        console.log('calling thjis thing')\n        if(trainLocations && positions){\n            currentLine.TrackCircuits.map((point) => {\n                trainLocations.map((train) => {\n                    \n                    var blah = point.CircuitId\n                    var blah2 = point.StationCode ? point.StationCode : ''\n                    var blah3 = point.CircuitId === train.CircuitId ? \"train\" : ''\n\n                    //console.log(blah, blah2, blah3)\n                })\n\n            })\n\n\n        }\n\n    }, [trainLocations])*/\n\n    function fetchPositionData() {\n\n    }\n\n\n\n\n\n      return(\n          <div>\n            <div>This is the psoitons map</div>\n            \n            \n        \n            \n            \n\n            {trainLocations && finalDict && trainLocations.map((train) => {\n                var data = finalDict[train.CircuitId]\n                console.log('data from train', data)\n            })}\n\n\n        <div id='lineMapParent'>\n            <div className='row'>\n                <div className='double_bottom_space'><b>Map of the {lineName} line</b></div>\n            </div>\n            <div>\n                <b>Incidents on this line:</b>\n                {finalIncidentList.length && finalIncidentList.map((incident) => {\n                    return(\n                        <div className='spaceTop incident spaceBottom'>{incident}</div>\n                    )\n                })}\n                <div>\n                </div>\n            </div>\n            {lineRoute.length && lineRoute.map((stop, i) => {\n                return(\n                    <div>\n                        <div className='row vertical_align'>\n                            <div className='stopIconBorder centerContent vertical_center'>\n                                <div style={{backgroundColor: getCustomColor(stop.LineCode)}} className='stopIcon'></div>\n                            </div>\n                            { currentStation && currentStation === stop.StationCode ? \n                                <div className='spaceLeft medTitle spaceTop'><b>{stop.StationName}</b></div>:\n                                <div className='spaceLeft  spaceTop'>{stop.StationName}</div>\n                            }       \n                        </div>\n                        {i === lineRoute.length - 1 ? <div className='spacer'></div> : <div className='stopLine'></div>}\n                    </div>\n\n                )\n            })}\n\n        </div>\n            \n          </div>\n\n          \n      )\n\n    \n\n\n}\n\nexport default PositionMap"]},"metadata":{},"sourceType":"module"}