{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [stationList, setStationList] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [selectedStationName, setSelectedStationName] = useState(null);\n  const [currentTrains, setCurrentTrains] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState({});\n  const [stationDistance, setStationDistance] = useState(0);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`).then(data => setStationList(data.data.Stations));\n  }, []);\n\n  function getCustomColor(line) {\n    switch (line) {\n      case 'RD':\n        return 'red';\n\n      case 'BL':\n        return 'blue';\n\n      case 'OR':\n        return 'orange';\n\n      case 'GR':\n        return 'green';\n\n      case 'SV':\n        return 'gray';\n\n      case 'YL':\n        return '#ffcc00';\n    }\n  }\n\n  function getTrainData(value) {\n    console.log('calling api with station', value);\n    axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`).then(payload => {\n      payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName);\n      setCurrentTrains(payload.data.Trains);\n    });\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setCurrentLocation({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    });\n  }, []);\n\n  const handleNearestStationClick = () => {\n    var minDistance = Infinity;\n    var closestStation = null;\n    var closestStationName = null;\n    stationList.map(station => {\n      var currDistance = getDistance({\n        currentLocation\n      }.currentLocation, {\n        latitude: station.Lat,\n        longitude: station.Lon\n      });\n\n      if (currDistance < minDistance) {\n        minDistance = currDistance;\n        closestStation = station.Code;\n        closestStationName = station.Name;\n      }\n    });\n    document.getElementById('stationSelect').value = closestStation;\n    console.log('the closest station is', closestStation, 'at distance', minDistance);\n    setSelectedStation(closestStation);\n    getTrainData(closestStation);\n    setSelectedStationName(closestStationName);\n    setStationDistance(minDistance * 0.000621371);\n  };\n\n  const handleStationSelect = event => {\n    setSelectedStation(event.target.value);\n    getTrainData(event.target.value);\n  };\n\n  function getTrainStatus(min) {\n    if (min === 'BRD') {\n      return 'BOARDING NOW';\n    } else if (min === 'ARR') {\n      return 'ARRIVING';\n    } else {\n      return `${min} minute${min > 1 ? 's' : ''} away`;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row vertical_center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button spacer\",\n    onClick: handleNearestStationClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Get Nearest Station\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"or\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"bottom_space\",\n    htmlFor: \"stations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Select Station: \"), stationList.length && /*#__PURE__*/React.createElement(\"select\", {\n    name: \"stations\",\n    id: \"stationSelect\",\n    onChange: handleStationSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, stationList.map(item => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: item.Code,\n      value: item.Code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 22\n      }\n    }, item.Name);\n  })))), selectedStationName && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 31\n    }\n  }, \"Trains leaving from \", selectedStationName, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, currentTrains.map(item => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      style: {\n        color: getCustomColor(item.Line)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 38\n      }\n    }, item.DestinationName), \" : \", getTrainStatus(item.Min), \" \");\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/App.js"],"names":["React","useEffect","useState","getDistance","axios","App","stationList","setStationList","selectedStation","setSelectedStation","selectedStationName","setSelectedStationName","currentTrains","setCurrentTrains","currentLocation","setCurrentLocation","stationDistance","setStationDistance","get","process","env","REACT_APP_RAIL_INFO_API","REACT_APP_SECRET","then","data","Stations","getCustomColor","line","getTrainData","value","console","log","REACT_APP_PREDICTION_API","payload","Trains","length","LocationName","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","handleNearestStationClick","minDistance","Infinity","closestStation","closestStationName","map","station","currDistance","Lat","Lon","Code","Name","document","getElementById","handleStationSelect","event","target","getTrainStatus","min","item","color","Line","DestinationName","Min"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAEhB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACQ,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,CAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,sBAAqBF,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnG,EACGC,IADH,CACSC,IAAD,IAAUjB,cAAc,CAACiB,IAAI,CAACA,IAAL,CAAUC,QAAX,CADhC;AAED,GAHQ,EAGN,EAHM,CAAT;;AAOA,WAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,YAAOA,IAAP;AACE,WAAK,IAAL;AACE,eAAO,KAAP;;AACF,WAAK,IAAL;AACE,eAAO,MAAP;;AACF,WAAK,IAAL;AACE,eAAO,QAAP;;AACF,WAAK,IAAL;AACE,eAAO,OAAP;;AACF,WAAK,IAAL;AACE,eAAO,MAAP;;AACF,WAAK,IAAL;AACE,eAAO,SAAP;AAZJ;AAcD;;AAID,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACAzB,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYY,wBAAyB,IAAGH,KAAM,YAAWV,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnG,EACGC,IADH,CACQU,OAAO,IAAI;AACfA,MAAAA,OAAO,CAACT,IAAR,CAAaU,MAAb,CAAoBC,MAApB,IAA8BxB,sBAAsB,CAACsB,OAAO,CAACT,IAAR,CAAaU,MAAb,CAAoB,CAApB,EAAuBE,YAAxB,CAApD;AACAvB,MAAAA,gBAAgB,CAACoB,OAAO,CAACT,IAAR,CAAaU,MAAd,CAAhB;AAED,KALH;AAMD;;AAGDjC,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAa;AAEpDzB,MAAAA,kBAAkB,CAAC;AAAC0B,QAAAA,QAAQ,EAAED,QAAQ,CAACE,MAAT,CAAgBD,QAA3B;AAAqCE,QAAAA,SAAS,EAAEH,QAAQ,CAACE,MAAT,CAAgBC;AAAhE,OAAD,CAAlB;AAED,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMC,yBAAyB,GAAG,MAAM;AACtC,QAAIC,WAAW,GAAGC,QAAlB;AACA,QAAIC,cAAc,GAAG,IAArB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AAEA1C,IAAAA,WAAW,CAAC2C,GAAZ,CAAiBC,OAAD,IAAY;AACxB,UAAIC,YAAY,GAAGhD,WAAW,CACd;AAACW,QAAAA;AAAD,QAAkBA,eADJ,EACqB;AACnC2B,QAAAA,QAAQ,EAAES,OAAO,CAACE,GADiB;AAEnCT,QAAAA,SAAS,EAAEO,OAAO,CAACG;AAFgB,OADrB,CAA9B;;AAMA,UAAIF,YAAY,GAAGN,WAAnB,EAA+B;AAC7BA,QAAAA,WAAW,GAAGM,YAAd;AACAJ,QAAAA,cAAc,GAAGG,OAAO,CAACI,IAAzB;AACAN,QAAAA,kBAAkB,GAAGE,OAAO,CAACK,IAA7B;AACD;AACJ,KAZD;AAaAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyC5B,KAAzC,GAA+CkB,cAA/C;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCgB,cAAtC,EAAsD,aAAtD,EAAqEF,WAArE;AACApC,IAAAA,kBAAkB,CAACsC,cAAD,CAAlB;AACAnB,IAAAA,YAAY,CAACmB,cAAD,CAAZ;AACApC,IAAAA,sBAAsB,CAACqC,kBAAD,CAAtB;AACA/B,IAAAA,kBAAkB,CAAC4B,WAAW,GAAG,WAAf,CAAlB;AAGD,GA1BD;;AA8BA,QAAMa,mBAAmB,GAAIC,KAAD,IAAW;AACrClD,IAAAA,kBAAkB,CAACkD,KAAK,CAACC,MAAN,CAAa/B,KAAd,CAAlB;AACAD,IAAAA,YAAY,CAAC+B,KAAK,CAACC,MAAN,CAAa/B,KAAd,CAAZ;AACD,GAHD;;AAKA,WAASgC,cAAT,CAAwBC,GAAxB,EAA4B;AAC1B,QAAIA,GAAG,KAAK,KAAZ,EAAkB;AAChB,aAAO,cAAP;AACD,KAFD,MAGK,IAAIA,GAAG,KAAK,KAAZ,EAAkB;AACrB,aAAO,UAAP;AACD,KAFI,MAGD;AACF,aAAQ,GAAEA,GAAI,UAAUA,GAAG,GAAG,CAAP,GAAY,GAAZ,GAAkB,EAAG,OAA5C;AACD;AAEF;;AAID,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,OAAO,EAAElB,yBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,eAGE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,OAAO,EAAC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAIGtC,WAAW,CAAC6B,MAAZ,iBACD;AAAQ,IAAA,IAAI,EAAC,UAAb;AAAwB,IAAA,EAAE,EAAC,eAA3B;AAA2C,IAAA,QAAQ,EAAEuB,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpD,WAAW,CAAC2C,GAAZ,CAAiBc,IAAD,IAAU;AACzB,wBAAO;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACT,IAAlB;AAAwB,MAAA,KAAK,EAAES,IAAI,CAACT,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CS,IAAI,CAACR,IAAhD,CAAP;AACD,GAFA,CADH,CALF,CAHF,CADF,EAiBG7C,mBAAmB,iBAAI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA6CA,mBAA7C,MAjB1B,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,aAAa,CAACqC,GAAd,CAAmBc,IAAD,IAAU;AAC3B,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyB;AAAG,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAEtC,cAAc,CAACqC,IAAI,CAACE,IAAN;AAAtB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+CF,IAAI,CAACG,eAApD,CAAzB,SAAqGL,cAAc,CAACE,IAAI,CAACI,GAAN,CAAnH,MADF;AAGD,GAJA,CADH,CAlBF,CADF;AA4BD,CApID;;AAsIA,eAAe9D,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n\n  const [stationList, setStationList] = useState([])\n  const [selectedStation, setSelectedStation] = useState(null)\n  const [selectedStationName, setSelectedStationName] = useState(null)\n  const [currentTrains, setCurrentTrains] = useState([])\n  const [currentLocation, setCurrentLocation] = useState({})\n  const [stationDistance, setStationDistance] = useState(0)\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`)\n      .then((data) => setStationList(data.data.Stations));\n  }, [])\n\n\n\n  function getCustomColor(line) {\n    switch(line) {\n      case 'RD':\n        return 'red'\n      case 'BL':\n        return 'blue'\n      case 'OR':\n        return 'orange'\n      case 'GR':\n        return 'green'\n      case 'SV':\n        return 'gray'\n      case 'YL':\n        return '#ffcc00'\n    }\n  }\n\n  \n\n  function getTrainData(value) {\n    console.log('calling api with station', value)\n    axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`)\n      .then(payload => {\n        payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName)\n        setCurrentTrains(payload.data.Trains)\n\n      })\n  }\n\n  \n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>{\n      \n      setCurrentLocation({latitude: position.coords.latitude, longitude: position.coords.longitude})\n      \n    })\n  }, [])\n\n  const handleNearestStationClick = () => {\n    var minDistance = Infinity\n    var closestStation = null\n    var closestStationName = null\n\n    stationList.map((station) =>{\n        var currDistance = getDistance(\n                        {currentLocation}.currentLocation, {\n                        latitude: station.Lat,\n                        longitude: station.Lon\n                      })\n                    \n        if (currDistance < minDistance){\n          minDistance = currDistance\n          closestStation = station.Code\n          closestStationName = station.Name\n        }\n    })\n    document.getElementById('stationSelect').value=closestStation\n    console.log('the closest station is', closestStation, 'at distance', minDistance)\n    setSelectedStation(closestStation)\n    getTrainData(closestStation)\n    setSelectedStationName(closestStationName)\n    setStationDistance(minDistance * 0.000621371)\n\n    \n  }\n\n\n\n  const handleStationSelect = (event) => {\n    setSelectedStation(event.target.value)\n    getTrainData(event.target.value)\n  }\n\n  function getTrainStatus(min){\n    if (min === 'BRD'){\n      return 'BOARDING NOW'\n    }\n    else if (min === 'ARR'){\n      return 'ARRIVING'\n    }\n    else{\n      return `${min} minute${(min > 1) ? 's' : ''} away`\n    }\n    \n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className='row vertical_center'>\n        <div className='button spacer' onClick={handleNearestStationClick}>Get Nearest Station</div>\n        <div className='spacer'>or</div>\n        <div className='column spacer'>\n          <label className='bottom_space' htmlFor='stations'>Select Station: </label>\n        \n        \n          {stationList.length && (\n          <select name='stations' id='stationSelect' onChange={handleStationSelect}>\n            {stationList.map((item) => {\n              return(<option key={item.Code} value={item.Code}>{item.Name}</option>)\n            })}\n          </select> )}\n        </div>\n      </div>\n\n      {selectedStationName && <div className='spacer'>Trains leaving from {selectedStationName} </div>}\n      <div >\n        {currentTrains.map((item) => {\n          return(\n            <div className='wrapper'><b style={{color: getCustomColor(item.Line)}}>{item.DestinationName}</b> : {getTrainStatus(item.Min)} </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}