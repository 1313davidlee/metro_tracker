{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/route.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst Route = props => {\n  const [startStation, setStartStation] = useState(null);\n  const [endStation, setEndStation] = useState(null);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_ROUTE_API}/jPath?FromStationCode=${props.start}&ToStationCode=${props.end}&api_key=${process.env.REACT_APP_SECRET}`).then(balh => console.log(balh));\n  }, []);\n\n  const handleStationSelect = event => {\n    stationList.map(station => {\n      if (station.Code === event.target.value) {\n        setSelectedStationName(station.Name);\n        setSelectedDistance(getDistance({\n          currentLocation\n        }.currentLocation, {\n          latitude: station.Lat,\n          longitude: station.Lon\n        }) * 0.000621371);\n      }\n    });\n    setSelectedStation(event.target.value);\n    getTrainData(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"this will be the route guide\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"bottom_space\",\n    htmlFor: \"stations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, \"Select Station: \"), stationList.length && /*#__PURE__*/React.createElement(\"select\", {\n    name: \"stations\",\n    id: \"stationSelect\",\n    onChange: handleStationSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    selected: true,\n    disabled: true,\n    hidden: true,\n    style: {\n      display: 'none'\n    },\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }), stationList.map(item => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: item.Code,\n      value: item.Code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 28\n      }\n    }, item.Name);\n  }))));\n};\n\nexport default Route;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/route.js"],"names":["React","useEffect","useState","getDistance","axios","Route","props","startStation","setStartStation","endStation","setEndStation","get","process","env","REACT_APP_ROUTE_API","start","end","REACT_APP_SECRET","then","balh","console","log","handleStationSelect","event","stationList","map","station","Code","target","value","setSelectedStationName","Name","setSelectedDistance","currentLocation","latitude","Lat","longitude","Lon","setSelectedStation","getTrainData","length","display","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,KAAK,CAACO,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,mBAAoB,0BAAyBR,KAAK,CAACS,KAAM,kBAAiBT,KAAK,CAACU,GAAI,YAAWJ,OAAO,CAACC,GAAR,CAAYI,gBAAiB,EAArJ,EACGC,IADH,CACSC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CADlB;AAED,GAHM,EAGJ,EAHI,CAAT;;AAKA,QAAMG,mBAAmB,GAAIC,KAAD,IAAW;AAACC,IAAAA,WAAW,CAACC,GAAZ,CAAiBC,OAAD,IAAa;AACrE,UAAIA,OAAO,CAACC,IAAR,KAAiBJ,KAAK,CAACK,MAAN,CAAaC,KAAlC,EAAwC;AACpCC,QAAAA,sBAAsB,CAACJ,OAAO,CAACK,IAAT,CAAtB;AACAC,QAAAA,mBAAmB,CAAC7B,WAAW,CAAC;AAAC8B,UAAAA;AAAD,UAAkBA,eAAnB,EACC;AAACC,UAAAA,QAAQ,EAAER,OAAO,CAACS,GAAnB;AACAC,UAAAA,SAAS,EAAEV,OAAO,CAACW;AADnB,SADD,CAAX,GAEuC,WAFxC,CAAnB;AAGH;AACA,KAPuC;AASxCC,IAAAA,kBAAkB,CAACf,KAAK,CAACK,MAAN,CAAaC,KAAd,CAAlB;AACAU,IAAAA,YAAY,CAAChB,KAAK,CAACK,MAAN,CAAaC,KAAd,CAAZ;AACC,GAXD;;AAaA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAEI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,OAAO,EAAC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAIKL,WAAW,CAACgB,MAAZ,iBACD;AAAQ,IAAA,IAAI,EAAC,UAAb;AAAwB,IAAA,EAAE,EAAC,eAA3B;AAA2C,IAAA,QAAQ,EAAElB,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,QAAQ,MAAzB;AAA0B,IAAA,MAAM,MAAhC;AAAiC,IAAA,KAAK,EAAE;AAACmB,MAAAA,OAAO,EAAE;AAAV,KAAxC;AAA2D,IAAA,KAAK,EAAC,EAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECjB,WAAW,CAACC,GAAZ,CAAiBiB,IAAD,IAAU;AACvB,wBAAO;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACf,IAAlB;AAAwB,MAAA,KAAK,EAAEe,IAAI,CAACf,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2Ce,IAAI,CAACX,IAAhD,CAAP;AACH,GAFA,CAFD,CALJ,CAFJ,CADJ;AAmBH,CA5CD;;AA8CA,eAAe1B,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst Route = props => {\n\n    const [startStation, setStartStation] = useState(null)\n    const [endStation, setEndStation] = useState(null)\n\n\n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_ROUTE_API}/jPath?FromStationCode=${props.start}&ToStationCode=${props.end}&api_key=${process.env.REACT_APP_SECRET}`)\n          .then((balh) => console.log(balh))\n      }, [])\n\n    const handleStationSelect = (event) => {stationList.map((station) => {\n    if (station.Code === event.target.value){\n        setSelectedStationName(station.Name)\n        setSelectedDistance(getDistance({currentLocation}.currentLocation, \n                                        {latitude: station.Lat,\n                                        longitude: station.Lon}) * 0.000621371)\n    }\n    })\n    \n    setSelectedStation(event.target.value)\n    getTrainData(event.target.value)\n    }\n\n    return(\n        <div>\n            <div>this will be the route guide</div>\n            <div className='column spacer'>\n                <label className='bottom_space' htmlFor='stations'>Select Station: </label>\n            \n            \n                {stationList.length && (\n                <select name='stations' id='stationSelect' onChange={handleStationSelect}>\n                <option selected disabled hidden style={{display: 'none'}} value=''></option>\n                {stationList.map((item) => {\n                    return(<option key={item.Code} value={item.Code}>{item.Name}</option>)\n                })}\n                </select> )}\n            </div>           \n        </div>\n\n    )\n\n}\n\nexport default Route;"]},"metadata":{},"sourceType":"module"}