{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/route.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst Route = props => {\n  const [startStation, setStartStation] = useState(null);\n  const [endStation, setEndStation] = useState(null);\n  const [startStationName, setStartStationName] = useState(null);\n  const [endStationName, setEndStationName] = useState(null);\n  const [stationList, setStationList] = useState([]);\n  const [currentRoute, setCurrentRoute] = useState([]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`).then(data => setStationList(data.data.Stations));\n  }, []);\n  /* useEffect(() => {\n       navigator.geolocation.getCurrentPosition((position) =>{\n         setCurrentLocation({latitude: position.coords.latitude, longitude: position.coords.longitude})\n       })\n     }, [])*/\n\n  console.log('curr loc', currentLocation);\n\n  function fetchRouteData(start, end) {\n    console.log('fetching route data', start, end);\n\n    if (start && end) {\n      axios.get(`${process.env.REACT_APP_ROUTE_API}/FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`).then(data => setCurrentRoute(data.data));\n    }\n\n    console.log(currentRoute);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Where are you going?\")));\n};\n\nexport default Route;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/route.js"],"names":["React","useEffect","useState","getDistance","axios","Route","props","startStation","setStartStation","endStation","setEndStation","startStationName","setStartStationName","endStationName","setEndStationName","stationList","setStationList","currentRoute","setCurrentRoute","get","process","env","REACT_APP_RAIL_INFO_API","REACT_APP_SECRET","then","data","Stations","console","log","currentLocation","fetchRouteData","start","end","REACT_APP_ROUTE_API"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AAIAD,EAAAA,SAAS,CAAC,MAAM;AAChBG,IAAAA,KAAK,CAACe,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,sBAAqBF,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnG,EACKC,IADL,CACWC,IAAD,IAAUT,cAAc,CAACS,IAAI,CAACA,IAAL,CAAUC,QAAX,CADlC;AAEC,GAHQ,EAGN,EAHM,CAAT;AAKD;;;;;;AAKGC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,eAAxB;;AAEF,WAASC,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;AAEhCL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,KAAnC,EAA0CC,GAA1C;;AACA,QAAID,KAAK,IAAIC,GAAb,EAAiB;AACb5B,MAAAA,KAAK,CAACe,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYY,mBAAoB,oBAAmBF,KAAM,kBAAiBC,GAAI,YAAWZ,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnI,EACKC,IADL,CACWC,IAAD,IAAUP,eAAe,CAACO,IAAI,CAACA,IAAN,CADnC;AAEH;;AAEDE,IAAAA,OAAO,CAACC,GAAR,CAAYX,YAAZ;AACH;;AAID,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CADJ,CADJ;AAYH,CAhDD;;AAkDA,eAAeZ,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst Route = props => {\n\n    const [startStation, setStartStation] = useState(null)\n    const [endStation, setEndStation] = useState(null)\n    const [startStationName, setStartStationName] = useState(null)\n    const [endStationName, setEndStationName] = useState(null)\n    const [stationList, setStationList] = useState([])\n    const [currentRoute, setCurrentRoute] = useState([])\n\n\n\n    useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`)\n        .then((data) => setStationList(data.data.Stations));\n    }, [])\n\n   /* useEffect(() => {\n        navigator.geolocation.getCurrentPosition((position) =>{\n          setCurrentLocation({latitude: position.coords.latitude, longitude: position.coords.longitude})\n        })\n      }, [])*/\n      console.log('curr loc', currentLocation)\n\n    function fetchRouteData(start, end) {\n        \n        console.log('fetching route data', start, end)\n        if (start && end){\n            axios.get(`${process.env.REACT_APP_ROUTE_API}/FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`)\n                .then((data) => setCurrentRoute(data.data))\n        }\n\n        console.log(currentRoute)\n    }\n\n    \n\n    return(\n        <div>\n            <div className='column spacer'>\n                <div>Where are you going?</div>\n               \n                \n\n            </div>           \n        </div>\n\n    )\n\n}\n\nexport default Route;"]},"metadata":{},"sourceType":"module"}