{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/route.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js';\nimport axios from 'axios';\nimport App from './App.js';\nimport './App.css';\n\nconst Route = props => {\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [stationList, setStationList] = useState([]);\n  const [currentRoute, setCurrentRoute] = useState([]);\n  const [startStation, setStartStation] = useState(null);\n  const [endStation, setEndStation] = useState(null);\n  const [showResponse, setShowResponse] = useState(false);\n  const tempCurrLoc = {\n    latitude: 37.421552399999996,\n    longitude: -122.09509510000001\n  };\n  const tempDestLoc = {\n    latitude: 38.324703,\n    longitude: -77.908226\n  };\n  useEffect(() => {\n    setStationList(props.stationList);\n  }, [props.stationList]);\n  useEffect(() => {\n    setCurrentLocation(props.currentLocation);\n  }, [props.currentLocation]);\n  useEffect(() => {\n    if (startStation && endStation) {\n      var start = startStation;\n      var end = endStation;\n      console.log('fetching route data', start, end);\n\n      if (start && end) {\n        axios.get(`${process.env.REACT_APP_ROUTE_API}?FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`).then(data => setCurrentRoute(data.data));\n      }\n    }\n  }, [startStation, endStation]);\n  useEffect(() => {\n    var stuff = currentRoute['StationToStationInfos'];\n    var stuff2 = [{\n      \"SourceStation\": \"A07\",\n      \"DestinationStation\": \"A13\",\n      \"CompositeMiles\": 8.23,\n      \"RailTime\": 16,\n      \"RailFare\": {\n        \"PeakTime\": 3.85,\n        \"OffPeakTime\": 3.20,\n        \"SeniorDisabled\": 1.90\n      }\n    }];\n    console.log('looking further', stuff);\n  }, [currentRoute]);\n\n  function findNearestStation(inputLocation) {\n    var minDistance = Infinity;\n    var minStationCode = null;\n    stationList.map(station => {\n      var currDist = getDistance({\n        latitude: station.Lat,\n        longitude: station.Lon\n      }, inputLocation) * 0.000621371;\n\n      if (currDist < minDistance) {\n        minDistance = currDist;\n        minStationCode = station.Code;\n      }\n    });\n    return minDistance, minStationCode;\n  }\n\n  const handleDestinationEnter = () => {\n    var startDelta,\n        startStation = findNearestStation(currentLocation);\n    var endDelta,\n        endStation = findNearestStation(tempDestLoc);\n    console.log(startStation, endStation);\n    setStartStation(startStation);\n    setEndStation(endStation);\n    setShowResponse(true);\n  };\n\n  function generateResponse() {\n    if (showResponse) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, \"test\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, currentRoute.SourceStation));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"Where are you going?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button spacer\",\n    onClick: handleDestinationEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"entered destination\"), generateResponse()));\n};\n\nexport default Route;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/route.js"],"names":["React","useEffect","useState","useContext","getDistance","AppContext","axios","App","Route","props","currentLocation","setCurrentLocation","stationList","setStationList","currentRoute","setCurrentRoute","startStation","setStartStation","endStation","setEndStation","showResponse","setShowResponse","tempCurrLoc","latitude","longitude","tempDestLoc","start","end","console","log","get","process","env","REACT_APP_ROUTE_API","REACT_APP_SECRET","then","data","stuff","stuff2","findNearestStation","inputLocation","minDistance","Infinity","minStationCode","map","station","currDist","Lat","Lon","Code","handleDestinationEnter","startDelta","endDelta","generateResponse","SourceStation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js'\nimport axios from 'axios';\nimport App from './App.js'\nimport './App.css';\n\nconst Route = (props) => {\n\n    const [currentLocation, setCurrentLocation] = useState(null)\n    const [stationList, setStationList] = useState([])\n    const [currentRoute, setCurrentRoute] = useState([])\n    const [startStation, setStartStation] = useState(null)\n    const [endStation, setEndStation] = useState(null)\n    const [showResponse, setShowResponse] = useState(false)\n\n    const tempCurrLoc = {latitude: 37.421552399999996, longitude: -122.09509510000001}\n    const tempDestLoc = {latitude: 38.324703, longitude: -77.908226}\n\n\n    useEffect(() => {\n        setStationList(props.stationList)\n      }, [props.stationList])\n    \n    useEffect(() => {\n        setCurrentLocation(props.currentLocation)\n    }, [props.currentLocation])\n\n    useEffect(() => {\n        if (startStation && endStation) {\n            var start = startStation\n            var end = endStation\n            console.log('fetching route data', start, end)\n            if (start && end){\n                axios.get(`${process.env.REACT_APP_ROUTE_API}?FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`)\n                    .then((data) => setCurrentRoute(data.data))\n            }\n        }\n    }, [startStation, endStation])\n\n    useEffect(() => {\n\n            var stuff = currentRoute['StationToStationInfos']\n            var stuff2 = [{\"SourceStation\":\"A07\",\"DestinationStation\":\"A13\",\"CompositeMiles\":8.23,\"RailTime\":16,\"RailFare\":{\"PeakTime\":3.85,\"OffPeakTime\":3.20,\"SeniorDisabled\":1.90}}]\n            console.log('looking further', stuff)\n        \n    }, [currentRoute])\n    \n    function findNearestStation(inputLocation){\n        var minDistance = Infinity\n        var minStationCode = null\n        stationList.map((station) => {\n            var currDist = getDistance(\n                                {latitude: station.Lat, longitude: station.Lon},\n                                inputLocation) * 0.000621371\n            if (currDist < minDistance){\n                minDistance = currDist\n                minStationCode = station.Code\n            }\n        })\n\n        return minDistance, minStationCode\n    }\n\n    const handleDestinationEnter = () => {\n        var startDelta, startStation = findNearestStation(currentLocation)\n        var endDelta, endStation = findNearestStation(tempDestLoc)\n        console.log(startStation, endStation)\n        setStartStation(startStation)\n        setEndStation(endStation)\n        setShowResponse(true)\n    }\n\n    function generateResponse() {\n        if (showResponse){\n\n            return(\n                <div>\n                    <div>test</div>\n                    <div>{currentRoute.SourceStation}</div>\n                </div>\n                \n            )\n        }\n    }\n\n   \n\n    \n\n    return(\n        <div>\n            <div className='column spacer'>\n                \n                <div>Where are you going?</div>\n                <div className='button spacer' onClick={handleDestinationEnter}>entered destination</div>\n\n                {generateResponse()}\n                \n\n            </div>           \n        </div>\n\n    )\n\n}\n\nexport default Route;"]},"metadata":{},"sourceType":"module"}