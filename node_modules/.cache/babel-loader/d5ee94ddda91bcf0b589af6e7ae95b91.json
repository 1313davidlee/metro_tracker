{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/App.js\";\nimport React, { useEffect, useState, createContext, useReducer } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport Route from './route.js';\nimport Tracker from './tracker.js';\nimport './App.css';\nexport const AppContext = createContext();\n\nconst App = () => {\n  const [view, setView] = useState('plan');\n  const [stationList, setStationList] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [stationNames, setStationNames] = useState({});\n\n  const handleViewToggle = () => {\n    console.log('here');\n    /*if(document.getElementById('track').checked){\n      setView('track')\n    }\n    else{\n      setView('plan')\n    }*/\n  };\n\n  useEffect(() => {\n    if (document.getElementById('track').checked) {\n      setView('track');\n    } else {\n      setView('plan');\n    }\n  }, [document.getElementById('track').checked, document.getElementById('plan').checked]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`).then(data => setStationList(data.data.Stations));\n  }, []);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setCurrentLocation({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    });\n  }, []);\n  useEffect(() => {\n    var temp_dict = {};\n\n    if (stationList.length) {\n      stationList.map(station => {\n        temp_dict[station.Code] = station.Name;\n      });\n      setStationNames(temp_dict);\n    }\n  }, [stationList]);\n\n  function renderMainBody() {\n    if (view === 'track') {\n      return /*#__PURE__*/React.createElement(Tracker, {\n        stationList: stationList,\n        currentLocation: currentLocation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Route, {\n        stationList: stationList,\n        currentLocation: currentLocation,\n        start: 'A06',\n        end: 'A09',\n        stationNames: stationNames,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer title noBottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"WMATA Live Train Tracker\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer column noBottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bottom_space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"space_right\",\n    type: \"radio\",\n    id: \"plan\",\n    name: \"view\",\n    value: \"plan\",\n    onClick: handleViewToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"space_left\",\n    htmlFor: \"plan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Trip Planner \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bottom_space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"track\",\n    name: \"view\",\n    value: \"track\",\n    onClick: handleViewToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \" space_left\",\n    htmlFor: \"track\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Train Tracker\"))), renderMainBody()));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/App.js"],"names":["React","useEffect","useState","createContext","useReducer","getDistance","axios","Route","Tracker","AppContext","App","view","setView","stationList","setStationList","currentLocation","setCurrentLocation","stationNames","setStationNames","handleViewToggle","console","log","document","getElementById","checked","get","process","env","REACT_APP_RAIL_INFO_API","REACT_APP_SECRET","then","data","Stations","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","temp_dict","length","map","station","Code","Name","renderMainBody"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createContext, useReducer } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport Route from './route.js'\nimport Tracker from './tracker.js'\nimport './App.css';\n\nexport const AppContext = createContext();\n\n\nconst App = () => {\n\n\n  const [view, setView] = useState('plan')\n  const [stationList, setStationList] = useState([])\n  const [currentLocation, setCurrentLocation] = useState(null)\n  const [stationNames, setStationNames] = useState({})\n\n\n\n  const handleViewToggle = () => {\n    console.log('here')\n    /*if(document.getElementById('track').checked){\n      setView('track')\n    }\n    else{\n      setView('plan')\n    }*/\n  }\n\n  useEffect(() =>{\n    if(document.getElementById('track').checked){\n      setView('track')\n    }\n    else{\n      setView('plan')\n    }\n  }, [document.getElementById('track').checked, document.getElementById('plan').checked])\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`)\n        .then((data) => setStationList(data.data.Stations));\n        \n    }, [])\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>{\n      setCurrentLocation({latitude: position.coords.latitude, longitude: position.coords.longitude})\n    })\n  }, [])\n\n  useEffect(() => {\n    var temp_dict = {}\n    if (stationList.length){\n      stationList.map((station) => {\n        temp_dict[station.Code] = station.Name\n      })\n\n      setStationNames(temp_dict)\n    }\n  }, [stationList])\n\n\n  function renderMainBody() {\n    if (view === 'track') {\n      return(\n        <Tracker stationList={stationList} currentLocation={currentLocation}></Tracker>\n\n      )\n    }\n    else{\n      return(\n        <Route \n          stationList={stationList}\n          currentLocation={currentLocation}\n          start={'A06'}\n          end={'A09'}\n          stationNames={stationNames}>\n        </Route>\n      )\n    }\n  }\n\n  \n \n\n\n\n  return (\n    <div className=\"App row\">\n      <div className=''>\n        <div className='spacer title noBottom'>WMATA Live Train Tracker</div>\n        <div className='spacer column noBottom'>\n          <div className='bottom_space'>\n            <input className='space_right' type=\"radio\" id=\"plan\" name=\"view\" value=\"plan\" onClick={handleViewToggle}></input>\n            <label className='space_left' htmlFor='plan'>Trip Planner </label>\n          </div>\n\n     \n          <div className='bottom_space'>\n            <input type=\"radio\" id=\"track\" name=\"view\" value=\"track\" onClick={handleViewToggle}></input>\n            <label className=' space_left' htmlFor='track'>Train Tracker</label>\n          </div>\n          \n        </div>\n\n\n\n        {renderMainBody()}\n        \n       \n\n        \n      </div>\n\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}