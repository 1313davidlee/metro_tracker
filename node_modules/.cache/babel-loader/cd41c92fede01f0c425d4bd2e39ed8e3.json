{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/route.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js';\nimport axios from 'axios';\nimport App from './App.js';\nimport './App.css';\n\nconst Route = props => {\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [stationList, setStationList] = useState([]);\n  const [currentRoute, setCurrentRoute] = useState([]);\n  const [startStation, setStartStation] = useState(null);\n  const [endStation, setEndStation] = useState(null);\n  const [showResponse, setShowResponse] = useState(false);\n  const [stationNames, setStationNames] = useState({});\n  const [startDelta, setStartDelta] = useState(0);\n  const [endDelta, setEndDelta] = useState(0);\n  const tempCurrLoc = {\n    latitude: 37.421552399999996,\n    longitude: -122.09509510000001\n  };\n  const tempDestLoc = {\n    latitude: 38.324703,\n    longitude: -77.908226\n  };\n  useEffect(() => {\n    setStationList(props.stationList);\n  }, [props.stationList]);\n  useEffect(() => {\n    setStationNames(props.stationNames);\n  }, [props.stationNames]);\n  useEffect(() => {\n    setCurrentLocation(props.currentLocation);\n  }, [props.currentLocation]);\n  useEffect(() => {\n    if (startStation && endStation) {\n      var start = startStation;\n      var end = endStation;\n      console.log('fetching route data', start, end);\n\n      if (start && end) {\n        axios.get(`${process.env.REACT_APP_ROUTE_API}?FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`).then(data => setCurrentRoute(data.data['StationToStationInfos']));\n      }\n    }\n  }, [startStation, endStation]);\n  /*useEffect(() => {\n           var stuff = currentRoute\n          var stuff2 = [{\"SourceStation\":\"A07\",\"DestinationStation\":\"A13\",\"CompositeMiles\":8.23,\"RailTime\":16,\"RailFare\":{\"PeakTime\":3.85,\"OffPeakTime\":3.20,\"SeniorDisabled\":1.90}}]\n          console.log('looking further', stuff[0])\n      \n  }, [currentRoute])*/\n\n  function findNearestStation(inputLocation) {\n    var minDistance = Infinity;\n    var minStationCode = null;\n    stationList.map(station => {\n      var currDist = getDistance({\n        latitude: station.Lat,\n        longitude: station.Lon\n      }, inputLocation) * 0.000621371;\n\n      if (currDist < minDistance) {\n        minDistance = currDist;\n        minStationCode = station.Code;\n      }\n    });\n    console.log('min dist', minDistance);\n    return [minDistance, minStationCode];\n  }\n\n  const handleDestinationEnter = () => {\n    var starter = findNearestStation(currentLocation);\n    var startDelta = starter[0];\n    var startStation = starter[1];\n    var ender = findNearestStation(tempDestLoc);\n    var endDelta = ender[0];\n    var endStation = ender[1];\n    console.log(startStation, endStation);\n    setStartStation(startStation);\n    setEndStation(endStation);\n    setShowResponse(true);\n    console.log(startDelta);\n    console.log(endDelta);\n    setStartDelta(startDelta);\n    setEndDelta(endDelta);\n  };\n\n  function generateResponse() {\n    if (showResponse && currentRoute[0] && Object.keys(stationNames).length != 0) {\n      var start = stationNames[startStation];\n      var end = stationNames[endStation];\n      console.log(start, end);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, \"Based on a lot of math that we did, we recommend this route to you:\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, \"Depart from: \", start, \" (\", startDelta, \" miles from you\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, \"Get off at: \", end, \" (\", endDelta, \" mile walk to your destination)\"));\n    }\n  }\n\n  function getTrainData(value) {\n    if (value) {\n      console.log('calling api with station', value);\n      axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`).then(payload => {\n        payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName);\n        setCurrentTrains(payload.data.Trains);\n        setUpdateTime(new Date().toLocaleTimeString());\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Where are you going?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button spacer\",\n    onClick: handleDestinationEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \"entered destination\"), generateResponse()));\n};\n\nexport default Route;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/route.js"],"names":["React","useEffect","useState","useContext","getDistance","AppContext","axios","App","Route","props","currentLocation","setCurrentLocation","stationList","setStationList","currentRoute","setCurrentRoute","startStation","setStartStation","endStation","setEndStation","showResponse","setShowResponse","stationNames","setStationNames","startDelta","setStartDelta","endDelta","setEndDelta","tempCurrLoc","latitude","longitude","tempDestLoc","start","end","console","log","get","process","env","REACT_APP_ROUTE_API","REACT_APP_SECRET","then","data","findNearestStation","inputLocation","minDistance","Infinity","minStationCode","map","station","currDist","Lat","Lon","Code","handleDestinationEnter","starter","ender","generateResponse","Object","keys","length","getTrainData","value","REACT_APP_PREDICTION_API","payload","Trains","setSelectedStationName","LocationName","setCurrentTrains","setUpdateTime","Date","toLocaleTimeString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAErB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,CAAD,CAAxC;AAEA,QAAM0B,WAAW,GAAG;AAACC,IAAAA,QAAQ,EAAE,kBAAX;AAA+BC,IAAAA,SAAS,EAAE,CAAC;AAA3C,GAApB;AACA,QAAMC,WAAW,GAAG;AAACF,IAAAA,QAAQ,EAAE,SAAX;AAAsBC,IAAAA,SAAS,EAAE,CAAC;AAAlC,GAApB;AAGA7B,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,cAAc,CAACJ,KAAK,CAACG,WAAP,CAAd;AACD,GAFM,EAEJ,CAACH,KAAK,CAACG,WAAP,CAFI,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,eAAe,CAACd,KAAK,CAACa,YAAP,CAAf;AACH,GAFQ,EAEN,CAACb,KAAK,CAACa,YAAP,CAFM,CAAT;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,kBAAkB,CAACF,KAAK,CAACC,eAAP,CAAlB;AACH,GAFQ,EAEN,CAACD,KAAK,CAACC,eAAP,CAFM,CAAT;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,YAAY,IAAIE,UAApB,EAAgC;AAC5B,UAAIc,KAAK,GAAGhB,YAAZ;AACA,UAAIiB,GAAG,GAAGf,UAAV;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,KAAnC,EAA0CC,GAA1C;;AACA,UAAID,KAAK,IAAIC,GAAb,EAAiB;AACb3B,QAAAA,KAAK,CAAC8B,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,mBAAoB,oBAAmBP,KAAM,kBAAiBC,GAAI,YAAWI,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnI,EACKC,IADL,CACWC,IAAD,IAAU3B,eAAe,CAAC2B,IAAI,CAACA,IAAL,CAAU,uBAAV,CAAD,CADnC;AAEH;AACJ;AACJ,GAVQ,EAUN,CAAC1B,YAAD,EAAeE,UAAf,CAVM,CAAT;AAYA;;;;;;;AAQA,WAASyB,kBAAT,CAA4BC,aAA5B,EAA0C;AACtC,QAAIC,WAAW,GAAGC,QAAlB;AACA,QAAIC,cAAc,GAAG,IAArB;AACAnC,IAAAA,WAAW,CAACoC,GAAZ,CAAiBC,OAAD,IAAa;AACzB,UAAIC,QAAQ,GAAG9C,WAAW,CACN;AAACyB,QAAAA,QAAQ,EAAEoB,OAAO,CAACE,GAAnB;AAAwBrB,QAAAA,SAAS,EAAEmB,OAAO,CAACG;AAA3C,OADM,EAENR,aAFM,CAAX,GAEsB,WAFrC;;AAGA,UAAIM,QAAQ,GAAGL,WAAf,EAA2B;AACvBA,QAAAA,WAAW,GAAGK,QAAd;AACAH,QAAAA,cAAc,GAAGE,OAAO,CAACI,IAAzB;AACH;AACJ,KARD;AASAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,WAAxB;AACA,WAAO,CAACA,WAAD,EAAcE,cAAd,CAAP;AACH;;AAED,QAAMO,sBAAsB,GAAG,MAAM;AACjC,QAAIC,OAAO,GAAGZ,kBAAkB,CAACjC,eAAD,CAAhC;AACA,QAAIc,UAAU,GAAG+B,OAAO,CAAC,CAAD,CAAxB;AACA,QAAIvC,YAAY,GAAGuC,OAAO,CAAC,CAAD,CAA1B;AAEA,QAAIC,KAAK,GAAGb,kBAAkB,CAACZ,WAAD,CAA9B;AACA,QAAIL,QAAQ,GAAG8B,KAAK,CAAC,CAAD,CAApB;AACA,QAAItC,UAAU,GAAGsC,KAAK,CAAC,CAAD,CAAtB;AAEAtB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,YAAZ,EAA0BE,UAA1B;AACAD,IAAAA,eAAe,CAACD,YAAD,CAAf;AACAG,IAAAA,aAAa,CAACD,UAAD,CAAb;AACAG,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAD,IAAAA,aAAa,CAACD,UAAD,CAAb;AACAG,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAjBD;;AAmBA,WAAS+B,gBAAT,GAA4B;AACxB,QAAIrC,YAAY,IAAIN,YAAY,CAAC,CAAD,CAA5B,IAAmC4C,MAAM,CAACC,IAAP,CAAYrC,YAAZ,EAA0BsC,MAA1B,IAAoC,CAA3E,EAA6E;AACzE,UAAI5B,KAAK,GAAGV,YAAY,CAACN,YAAD,CAAxB;AACA,UAAIiB,GAAG,GAAGX,YAAY,CAACJ,UAAD,CAAtB;AAEAgB,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,GAAnB;AAEA,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmBD,KAAnB,QAA4BR,UAA5B,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkBS,GAAlB,QAAyBP,QAAzB,oCAHJ,CADJ;AAQH;AACJ;;AAED,WAASmC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,QAAIA,KAAJ,EAAU;AACR5B,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwC2B,KAAxC;AACAxD,MAAAA,KAAK,CAAC8B,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYyB,wBAAyB,IAAGD,KAAM,YAAWzB,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnG,EACGC,IADH,CACQuB,OAAO,IAAI;AACfA,QAAAA,OAAO,CAACtB,IAAR,CAAauB,MAAb,CAAoBL,MAApB,IAA8BM,sBAAsB,CAACF,OAAO,CAACtB,IAAR,CAAauB,MAAb,CAAoB,CAApB,EAAuBE,YAAxB,CAApD;AACAC,QAAAA,gBAAgB,CAACJ,OAAO,CAACtB,IAAR,CAAauB,MAAd,CAAhB;AACAI,QAAAA,aAAa,CAAC,IAAIC,IAAJ,GAAWC,kBAAX,EAAD,CAAb;AACD,OALH;AAMD;AAEF;;AAMH,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFJ,eAGI;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,OAAO,EAAEjB,sBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHJ,EAKKG,gBAAgB,EALrB,CADJ,CADJ;AAeH,CArID;;AAuIA,eAAejD,KAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js'\nimport axios from 'axios';\nimport App from './App.js'\nimport './App.css';\n\nconst Route = (props) => {\n\n    const [currentLocation, setCurrentLocation] = useState(null)\n    const [stationList, setStationList] = useState([])\n    const [currentRoute, setCurrentRoute] = useState([])\n    const [startStation, setStartStation] = useState(null)\n    const [endStation, setEndStation] = useState(null)\n    const [showResponse, setShowResponse] = useState(false)\n    const [stationNames, setStationNames] = useState({})\n    const [startDelta, setStartDelta] = useState(0)\n    const [endDelta, setEndDelta] = useState(0)\n\n    const tempCurrLoc = {latitude: 37.421552399999996, longitude: -122.09509510000001}\n    const tempDestLoc = {latitude: 38.324703, longitude: -77.908226}\n\n\n    useEffect(() => {\n        setStationList(props.stationList)\n      }, [props.stationList])\n    \n    useEffect(() => {\n        setStationNames(props.stationNames)\n    }, [props.stationNames])\n    \n    useEffect(() => {\n        setCurrentLocation(props.currentLocation)\n    }, [props.currentLocation])\n\n    useEffect(() => {\n        if (startStation && endStation) {\n            var start = startStation\n            var end = endStation\n            console.log('fetching route data', start, end)\n            if (start && end){\n                axios.get(`${process.env.REACT_APP_ROUTE_API}?FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`)\n                    .then((data) => setCurrentRoute(data.data['StationToStationInfos']))\n            }\n        }\n    }, [startStation, endStation])\n\n    /*useEffect(() => {\n\n            var stuff = currentRoute\n            var stuff2 = [{\"SourceStation\":\"A07\",\"DestinationStation\":\"A13\",\"CompositeMiles\":8.23,\"RailTime\":16,\"RailFare\":{\"PeakTime\":3.85,\"OffPeakTime\":3.20,\"SeniorDisabled\":1.90}}]\n            console.log('looking further', stuff[0])\n        \n    }, [currentRoute])*/\n    \n    function findNearestStation(inputLocation){\n        var minDistance = Infinity\n        var minStationCode = null\n        stationList.map((station) => {\n            var currDist = getDistance(\n                                {latitude: station.Lat, longitude: station.Lon},\n                                inputLocation) * 0.000621371\n            if (currDist < minDistance){\n                minDistance = currDist\n                minStationCode = station.Code\n            }\n        })\n        console.log('min dist', minDistance)\n        return [minDistance, minStationCode]\n    }\n\n    const handleDestinationEnter = () => {\n        var starter = findNearestStation(currentLocation)\n        var startDelta = starter[0]\n        var startStation = starter[1]\n\n        var ender = findNearestStation(tempDestLoc)\n        var endDelta = ender[0]\n        var endStation = ender[1]\n\n        console.log(startStation, endStation)\n        setStartStation(startStation)\n        setEndStation(endStation)\n        setShowResponse(true)\n        console.log(startDelta)\n        console.log(endDelta)\n        setStartDelta(startDelta)\n        setEndDelta(endDelta)\n    }\n\n    function generateResponse() {\n        if (showResponse && currentRoute[0] && Object.keys(stationNames).length != 0){\n            var start = stationNames[startStation]\n            var end = stationNames[endStation]\n\n            console.log(start, end)\n\n            return(\n                <div>\n                    <div>Based on a lot of math that we did, we recommend this route to you:</div>\n                    <div>Depart from: {start} ({startDelta} miles from you</div>\n                    <div>Get off at: {end} ({endDelta} mile walk to your destination)</div> \n                </div>\n                \n            )\n        }\n    }\n\n    function getTrainData(value) {\n        if (value){\n          console.log('calling api with station', value)\n          axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`)\n            .then(payload => {\n              payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName)\n              setCurrentTrains(payload.data.Trains)\n              setUpdateTime(new Date().toLocaleTimeString())\n            })\n        }\n        \n      }\n\n   \n\n    \n\n    return(\n        <div>\n            <div className='column spacer'>\n                \n                <div>Where are you going?</div>\n                <div className='button spacer' onClick={handleDestinationEnter}>entered destination</div>\n\n                {generateResponse()}\n                \n\n            </div>           \n        </div>\n\n    )\n\n}\n\nexport default Route;"]},"metadata":{},"sourceType":"module"}