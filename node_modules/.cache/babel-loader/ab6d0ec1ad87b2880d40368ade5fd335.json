{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/positions.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LineMap from './linemap.js';\nimport './App.css';\n\nconst PositionMap = props => {\n  const [positions, setPositions] = useState(null);\n  const [lineCode, setLineCode] = useState('BL');\n  const [currentLine, setCurrentLine] = useState(null);\n  const [trainLocations, setTrainLocations] = useState(null);\n  const [finalDict, setFinalDict] = useState(null);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_POSITION_API}StandardRoutes?contentType=json&api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n      setPositions(data.data.StandardRoutes);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_TRAIN_POSITION_API}?contentType=json&api_key=${process.env.REACT_APP_SECRET}`).then(data => {\n      console.log('curr pos loc', data);\n      setTrainLocations(data.data.TrainPositions);\n    });\n  }, []);\n  useEffect(() => {\n    if (positions && lineCode) {\n      positions.map(line => {\n        if (line.LineCode === lineCode) {\n          setCurrentLine(line);\n          console.log('blah', line);\n        }\n      });\n    }\n  }, [lineCode, positions]);\n  useEffect(() => {\n    if (currentLine) {\n      var final_dict = {};\n      var station_dict = {};\n      var count = 0;\n      var temp = [];\n      currentLine.TrackCircuits.map(point => {\n        count += 1;\n\n        if (point.StationCode !== null) {\n          station_dict[point.CircuitId] = [count, point.stationCode];\n          temp.map(id => {\n            station_dict[id] = [count, point.stationCode];\n          });\n          temp = [];\n          count = 0;\n        } else {\n          temp.push(point.CircuitId);\n        }\n      });\n      var count2 = 0;\n      console.log('THIS IS THE STATION DICT');\n      currentLine.TrackCircuits.map(point => {\n        count2 += 1;\n        final_dict[point.CircuitId] = [count2];\n\n        if (point.StationCode !== null) {\n          count2 = 0;\n        }\n      });\n      console.log(final_dict);\n      setFinalDict(final_dict);\n    }\n  }, currentLine);\n  /*  useEffect(() => {\n        console.log('calling thjis thing')\n        if(trainLocations && positions){\n            currentLine.TrackCircuits.map((point) => {\n                trainLocations.map((train) => {\n                    \n                    var blah = point.CircuitId\n                    var blah2 = point.StationCode ? point.StationCode : ''\n                    var blah3 = point.CircuitId === train.CircuitId ? \"train\" : ''\n                     //console.log(blah, blah2, blah3)\n                })\n             })\n          }\n     }, [trainLocations])*/\n\n  function fetchPositionData() {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"This is the psoitons map\"), \"}\", /*#__PURE__*/React.createElement(LineMap, {\n    lineMap: \"BL\",\n    currentStation: \"J02\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), trainLocations && finalDict && trainLocations.map(train => {\n    var data = finalDict[train.CircuitId];\n    console.log('data from train', data);\n  }));\n};\n\nexport default PositionMap;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/positions.js"],"names":["React","useEffect","useState","axios","LineMap","PositionMap","props","positions","setPositions","lineCode","setLineCode","currentLine","setCurrentLine","trainLocations","setTrainLocations","finalDict","setFinalDict","get","process","env","REACT_APP_POSITION_API","REACT_APP_SECRET","then","data","StandardRoutes","REACT_APP_TRAIN_POSITION_API","console","log","TrainPositions","map","line","LineCode","final_dict","station_dict","count","temp","TrackCircuits","point","StationCode","CircuitId","stationCode","id","push","count2","fetchPositionData","train"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport LineMap from './linemap.js'\nimport './App.css';\n\n\nconst PositionMap = props => {\n\n    const [positions, setPositions] = useState(null)\n    const [lineCode, setLineCode] = useState('BL')\n    const [currentLine, setCurrentLine] = useState(null)\n    const [trainLocations, setTrainLocations] = useState(null)\n    const [finalDict, setFinalDict] = useState(null)\n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_POSITION_API}StandardRoutes?contentType=json&api_key=${process.env.REACT_APP_SECRET}`)\n         .then((data) => {\n           setPositions(data.data.StandardRoutes)\n         })\n      }, [])\n\n      useEffect(() => {\n          axios.get(`${process.env.REACT_APP_TRAIN_POSITION_API}?contentType=json&api_key=${process.env.REACT_APP_SECRET}`)\n          .then((data) => {\n              console.log('curr pos loc', data)\n              setTrainLocations(data.data.TrainPositions)\n          })\n      }, [])\n\n    useEffect(() => {\n        if(positions && lineCode) {\n            positions.map((line) => {\n                if (line.LineCode === lineCode){\n                    setCurrentLine(line)\n                    console.log('blah', line)\n\n                }\n            })\n        }\n    }, [lineCode, positions])\n\n    useEffect(() => {\n\n        if (currentLine){\n            var final_dict = {}\n            var station_dict = {}\n\n            var count = 0\n            var temp = []\n            currentLine.TrackCircuits.map((point) => {\n                count += 1\n                if (point.StationCode !== null){\n                    station_dict[point.CircuitId] = [count, point.stationCode]\n\n                    temp.map((id) => {\n                        station_dict[id] = [count, point.stationCode]\n                    })\n                    temp = []\n                    count = 0\n                }\n                else{\n                    temp.push(point.CircuitId)\n                }\n            })\n            var count2 = 0\n            console.log('THIS IS THE STATION DICT')\n            currentLine.TrackCircuits.map((point) => {\n                count2 += 1\n                final_dict[point.CircuitId] = [count2] \n                if (point.StationCode !== null){\n                    count2 = 0\n                }\n                \n            })\n            console.log(final_dict)\n            setFinalDict(final_dict)\n        }\n    }, currentLine)\n\n\n\n  /*  useEffect(() => {\n        console.log('calling thjis thing')\n        if(trainLocations && positions){\n            currentLine.TrackCircuits.map((point) => {\n                trainLocations.map((train) => {\n                    \n                    var blah = point.CircuitId\n                    var blah2 = point.StationCode ? point.StationCode : ''\n                    var blah3 = point.CircuitId === train.CircuitId ? \"train\" : ''\n\n                    //console.log(blah, blah2, blah3)\n                })\n\n            })\n\n\n        }\n\n    }, [trainLocations])*/\n\n    function fetchPositionData() {\n\n    }\n\n\n\n\n\n      return(\n          <div>\n            <div>This is the psoitons map</div>\n            \n            \n        \n            }\n            <LineMap lineMap={\"BL\"} currentStation={\"J02\"}></LineMap>\n\n            {trainLocations && finalDict && trainLocations.map((train) => {\n                var data = finalDict[train.CircuitId]\n                console.log('data from train', data)\n            })}\n            \n          </div>\n\n          \n      )\n\n    \n\n\n}\n\nexport default PositionMap"]},"metadata":{},"sourceType":"module"}