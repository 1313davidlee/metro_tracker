{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [stationList, setStationList] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [selectedStationName, setSelectedStationName] = useState(null);\n  const [currentTrains, setCurrentTrains] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState({});\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`).then(data => setStationList(data.data.Stations));\n  }, []);\n\n  function getCustomColor(line) {\n    switch (line) {\n      case 'RD':\n        return 'red';\n\n      case 'BL':\n        return 'blue';\n\n      case 'OR':\n        return 'orange';\n\n      case 'GR':\n        return 'green';\n\n      case 'SV':\n        return 'gray';\n\n      case 'YL':\n        return '#ffcc00';\n    }\n  }\n\n  function getTrainData(event) {\n    console.log('calling api with station', event.target.value);\n    axios.get(`${process.env.REACT_APP_PREDICTION_API}/${event.target.value}?api_key=${process.env.REACT_APP_SECRET}`).then(payload => {\n      payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName);\n      setCurrentTrains(payload.data.Trains);\n    });\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setCurrentLocation({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    });\n  }, []);\n\n  const handleNearestStationClick = () => {\n    console.log('curr loc');\n    console.log(getDistance({\n      currentLocation\n    }.currentLocation, {\n      latitude: 51.525,\n      longitude: 7.4575\n    }));\n  };\n\n  const handleStationSelect = event => {\n    setSelectedStation(event.target.value);\n    getTrainData(event);\n  };\n\n  function getTrainStatus(min) {\n    if (min === 'BRD') {\n      return 'BOARDING NOW';\n    } else if (min === 'ARR') {\n      return 'ARRIVING';\n    } else {\n      return `${min} minute${min > 1 ? 's' : ''} away`;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button\",\n    onClick: handleNearestStationClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"Get Nearest Station\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"or\"), currentLocation && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 27\n    }\n  }, currentLocation.longitude), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"stations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Select Station: \"), stationList.length && /*#__PURE__*/React.createElement(\"select\", {\n    name: \"stations\",\n    onChange: handleStationSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, stationList.map(item => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: item.Code,\n      value: item.Code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }\n    }, item.Name);\n  })), selectedStationName && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 31\n    }\n  }, \"Trains leaving from \", selectedStationName, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, currentTrains.map(item => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      style: {\n        color: getCustomColor(item.Line)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 38\n      }\n    }, item.DestinationName), \" : \", getTrainStatus(item.Min), \" \");\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/App.js"],"names":["React","useEffect","useState","getDistance","axios","App","stationList","setStationList","selectedStation","setSelectedStation","selectedStationName","setSelectedStationName","currentTrains","setCurrentTrains","currentLocation","setCurrentLocation","get","process","env","REACT_APP_RAIL_INFO_API","REACT_APP_SECRET","then","data","Stations","getCustomColor","line","getTrainData","event","console","log","target","value","REACT_APP_PREDICTION_API","payload","Trains","length","LocationName","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","handleNearestStationClick","handleStationSelect","getTrainStatus","min","map","item","Code","Name","color","Line","DestinationName","Min"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n\n  const [stationList, setStationList] = useState([])\n  const [selectedStation, setSelectedStation] = useState(null)\n  const [selectedStationName, setSelectedStationName] = useState(null)\n  const [currentTrains, setCurrentTrains] = useState([])\n  const [currentLocation, setCurrentLocation] = useState({})\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`)\n      .then((data) => setStationList(data.data.Stations));\n  }, [])\n\n\n\n  function getCustomColor(line) {\n    switch(line) {\n      case 'RD':\n        return 'red'\n      case 'BL':\n        return 'blue'\n      case 'OR':\n        return 'orange'\n      case 'GR':\n        return 'green'\n      case 'SV':\n        return 'gray'\n      case 'YL':\n        return '#ffcc00'\n    }\n  }\n\n  function getTrainData(event) {\n    console.log('calling api with station', event.target.value)\n    axios.get(`${process.env.REACT_APP_PREDICTION_API}/${event.target.value}?api_key=${process.env.REACT_APP_SECRET}`)\n      .then(payload => {\n        payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName)\n        setCurrentTrains(payload.data.Trains)\n\n      })\n  }\n\n  \n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>{\n      \n      setCurrentLocation({latitude: position.coords.latitude, longitude: position.coords.longitude})\n      \n    })\n  }, [])\n\n  const handleNearestStationClick = () => {\n    console.log('curr loc', )\n    console.log(\n    getDistance(\n      {currentLocation}.currentLocation, {\n      latitude: 51.525,\n      longitude: 7.4575,\n  }))\n  }\n\n\n\n  const handleStationSelect = (event) => {\n    setSelectedStation(event.target.value)\n    getTrainData(event)\n  }\n\n\n\n  \n\n  function getTrainStatus(min){\n    if (min === 'BRD'){\n      return 'BOARDING NOW'\n    }\n    else if (min === 'ARR'){\n      return 'ARRIVING'\n    }\n    else{\n      return `${min} minute${(min > 1) ? 's' : ''} away`\n    }\n    \n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className='button' onClick={handleNearestStationClick}>Get Nearest Station</div>\n      <div>or</div>\n      {currentLocation && <div>{currentLocation.longitude}</div>}\n      <label htmlFor='stations'>Select Station: </label>\n      {stationList.length && (\n      <select name='stations' onChange={handleStationSelect}>\n        {stationList.map((item) => {\n          return(<option key={item.Code} value={item.Code}>{item.Name}</option>)\n        })}\n      </select> )}\n      {selectedStationName && <div>Trains leaving from {selectedStationName} </div>}\n      <div >\n        {currentTrains.map((item) => {\n          return(\n            <div className='wrapper'><b style={{color: getCustomColor(item.Line)}}>{item.DestinationName}</b> : {getTrainStatus(item.Min)} </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}