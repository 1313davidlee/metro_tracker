{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/tracker.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport LineMap from './linemap.js';\nimport axios from 'axios';\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport './App.css';\n\nconst Tracker = props => {\n  const [stationList, setStationList] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [selectedStationName, setSelectedStationName] = useState(null);\n  const [currentTrains, setCurrentTrains] = useState([]);\n  const [selectedDistance, setSelectedDistance] = useState(0);\n  const [updateTime, setUpdateTime] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [renderLineMap, setRenderLineMap] = useState(false);\n  const [lineMap, setLineMap] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    setStationList(props.stationList);\n  }, [props.stationList]);\n  useEffect(() => {\n    setTimeout(setCurrentLocation(props.currentLocation), 10000);\n  }, [props.currentLocation]);\n  useEffect(() => {\n    if (currentLocation !== null && stationList.length) {\n      setLoading(false);\n    }\n  }, [currentLocation, stationList]);\n  useEffect(() => {\n    if (!loading) {\n      if (showLoader) {\n        setShowLoader(false);\n        handleNearestStationClick();\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getTrainData(selectedStation);\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [selectedStation]);\n\n  const handleNearestStationClick = () => {\n    if (loading) {\n      setShowLoader(true);\n    } else {\n      var minDistance = Infinity;\n      var closestStation = null;\n      var closestStationName = null;\n      stationList.map(station => {\n        var currDistance = getDistance({\n          currentLocation\n        }.currentLocation, {\n          latitude: station.Lat,\n          longitude: station.Lon\n        });\n\n        if (currDistance < minDistance) {\n          minDistance = currDistance;\n          closestStation = station.Code;\n          closestStationName = station.Name;\n        }\n      });\n      document.getElementById('stationSelect').value = closestStation;\n      setSelectedStation(closestStation);\n      getTrainData(closestStation);\n      setSelectedStationName(closestStationName);\n      setSelectedDistance(minDistance * 0.000621371);\n    }\n  };\n\n  const handleStationSelect = event => {\n    stationList.map(station => {\n      if (station.Code === event.target.value) {\n        setSelectedStationName(station.Name);\n        setSelectedDistance(getDistance({\n          currentLocation\n        }.currentLocation, {\n          latitude: station.Lat,\n          longitude: station.Lon\n        }) * 0.000621371);\n      }\n    });\n    setSelectedStation(event.target.value);\n    getTrainData(event.target.value);\n  };\n\n  function getTrainStatus(min) {\n    if (min === 'BRD') {\n      return /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 14\n        }\n      }, \"\\xA0BOARDING NOW\");\n    } else if (min === 'ARR') {\n      return /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 14\n        }\n      }, \"\\xA0ARRIVING NOW\");\n    } else if (min === '---') {\n      return `N/A`;\n    } else {\n      return `${min} minute${min > 1 ? 's' : ''} away`;\n    }\n  }\n\n  function getCustomColor(line) {\n    switch (line) {\n      case 'RD':\n        return '#f76f6f';\n\n      case 'BL':\n        return '#8fc1ff';\n\n      case 'OR':\n        return '#ff9900';\n\n      case 'GR':\n        return '#abd1af';\n\n      case 'SV':\n        return '#c2c2c2';\n\n      case 'YL':\n        return '#ffe999';\n\n      case 'No':\n        return 'gray';\n\n      default:\n        return 'gray';\n    }\n  }\n\n  function getTrainData(value) {\n    if (value) {\n      console.log('calling api with station', value);\n      axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`).then(payload => {\n        payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName);\n        setCurrentTrains(payload.data.Trains);\n        setUpdateTime(new Date().toLocaleTimeString());\n      });\n    }\n  }\n\n  function getSelectedStationDistance() {\n    if (selectedDistance > 0) {\n      return `(${selectedDistance.toFixed(2)} miles from you)`;\n    }\n  }\n\n  const handleLineClick = lineKey => {\n    setRenderLineMap(true);\n    console.log('this is the line key', lineKey);\n    setLineMap(lineKey);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row fillWidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row vertical_center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button largeButtonWidth spacer\",\n    onClick: handleNearestStationClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, \"Get Nearest Station\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"or\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"bottom_space\",\n    htmlFor: \"stations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"Select Station: \"), stationList.length && /*#__PURE__*/React.createElement(\"select\", {\n    name: \"stations\",\n    id: \"stationSelect\",\n    onChange: handleStationSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    defaultValue: \"\",\n    style: {\n      display: 'none'\n    },\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }), stationList.map(item => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: item.Code,\n      value: item.Code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 24\n      }\n    }, item.Name);\n  })))), showLoader ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spaceLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FadeLoader, {\n    size: 50,\n    color: \"gray\",\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  })) : '', selectedStationName && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spaceLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"Trains leaving from \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 58\n    }\n  }, selectedStationName), \" \", getSelectedStationDistance(), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spaceLeft subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, updateTime != null ? `Last updated at ${updateTime}` : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spaceLeft subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \"Click on the line icon to see more details\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, currentTrains.length > 0 ? currentTrains.map(item => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper spacer row vertical_center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: getCustomColor(item.Line)\n      },\n      className: \"spaceRight cursor\",\n      id: \"lineIcon\",\n      onClick: () => handleLineClick(item.Line),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    }, item.DestinationName), \" : \", getTrainStatus(item.Min));\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, selectedStation === null ? '' : 'No trains found'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"extraSpaceLeft fillParent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, renderLineMap ? /*#__PURE__*/React.createElement(LineMap, {\n    lineMap: lineMap,\n    currentStation: selectedStation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 26\n    }\n  }) : ''));\n};\n\nexport default Tracker;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/tracker.js"],"names":["React","useEffect","useState","getDistance","LineMap","axios","FadeLoader","Tracker","props","stationList","setStationList","selectedStation","setSelectedStation","selectedStationName","setSelectedStationName","currentTrains","setCurrentTrains","selectedDistance","setSelectedDistance","updateTime","setUpdateTime","currentLocation","setCurrentLocation","renderLineMap","setRenderLineMap","lineMap","setLineMap","loading","setLoading","showLoader","setShowLoader","setTimeout","length","handleNearestStationClick","interval","setInterval","getTrainData","clearInterval","minDistance","Infinity","closestStation","closestStationName","map","station","currDistance","latitude","Lat","longitude","Lon","Code","Name","document","getElementById","value","handleStationSelect","event","target","getTrainStatus","min","getCustomColor","line","console","log","get","process","env","REACT_APP_PREDICTION_API","REACT_APP_SECRET","then","payload","data","Trains","LocationName","Date","toLocaleTimeString","getSelectedStationDistance","toFixed","handleLineClick","lineKey","display","item","backgroundColor","Line","DestinationName","Min"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getDistance } from 'geolib';\nimport LineMap from './linemap.js'\nimport axios from 'axios';\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport './App.css';\n\n\nconst Tracker = (props) => {\n\n\n  const [stationList, setStationList] = useState([])\n  const [selectedStation, setSelectedStation] = useState(null)\n  const [selectedStationName, setSelectedStationName] = useState(null)\n  const [currentTrains, setCurrentTrains] = useState([])\n  const [selectedDistance, setSelectedDistance] = useState(0)\n  const [updateTime, setUpdateTime] = useState(null)\n  const [currentLocation, setCurrentLocation] = useState(null)\n  const [renderLineMap, setRenderLineMap] = useState(false)\n  const [lineMap, setLineMap] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [showLoader, setShowLoader] = useState(false)\n\n  useEffect(() => {\n    setStationList(props.stationList)\n  }, [props.stationList])\n\n  useEffect(() => {\n    setTimeout(setCurrentLocation(props.currentLocation)\n    , 10000);\n\n  }, [props.currentLocation])\n\n  useEffect(() => {\n    if(currentLocation !== null && stationList.length){\n      setLoading(false)\n    }\n  }, [currentLocation, stationList])\n\n  useEffect(() => {\n    if (!loading){\n      if(showLoader){\n        setShowLoader(false)\n        handleNearestStationClick()\n      }\n    }\n  }, [loading])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getTrainData(selectedStation)\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [selectedStation]);\n\n\n  const handleNearestStationClick = () => {\n\n    if (loading){\n      setShowLoader(true)\n    }\n    else{\n      var minDistance = Infinity\n      var closestStation = null\n      var closestStationName = null\n  \n      stationList.map((station) =>{\n          var currDistance = getDistance({currentLocation}.currentLocation, {\n            latitude: station.Lat,\n            longitude: station.Lon\n          })\n                      \n          if (currDistance < minDistance){\n            minDistance = currDistance\n            closestStation = station.Code\n            closestStationName = station.Name\n          }\n      })\n      document.getElementById('stationSelect').value=closestStation\n      setSelectedStation(closestStation)\n      getTrainData(closestStation)\n      setSelectedStationName(closestStationName)\n      setSelectedDistance(minDistance * 0.000621371)\n    }\n\n\n  }\n\n  const handleStationSelect = (event) => {stationList.map((station) => {\n    \n    if (station.Code === event.target.value){\n      setSelectedStationName(station.Name)\n      setSelectedDistance(getDistance({currentLocation}.currentLocation, \n                                        {latitude: station.Lat,\n                                        longitude: station.Lon}) * 0.000621371)\n    }\n  })\n    setSelectedStation(event.target.value)\n    getTrainData(event.target.value)\n  }\n\n  function getTrainStatus(min){\n    if (min === 'BRD'){\n      return <b>&nbsp;BOARDING NOW</b>\n    }\n    else if (min === 'ARR'){\n      return <b>&nbsp;ARRIVING NOW</b>\n    }\n    else if (min === '---'){\n      return `N/A`\n    }\n    else{\n      return `${min} minute${(min > 1) ? 's' : ''} away`\n    }\n\n  }\n\n  function getCustomColor(line) {\n    switch(line) {\n      case 'RD':\n        return '#f76f6f'\n      case 'BL':\n        return '#8fc1ff'\n      case 'OR':\n        return '#ff9900'\n      case 'GR':\n        return '#abd1af'\n      case 'SV':\n        return '#c2c2c2'\n      case 'YL':\n        return '#ffe999'\n      case 'No':\n        return 'gray'\n      default:\n        return 'gray'\n    }\n  }\n\n  function getTrainData(value) {\n    if (value){\n      console.log('calling api with station', value)\n      axios.get(`${process.env.REACT_APP_PREDICTION_API}/${value}?api_key=${process.env.REACT_APP_SECRET}`)\n        .then(payload => {\n          payload.data.Trains.length && setSelectedStationName(payload.data.Trains[0].LocationName)\n          setCurrentTrains(payload.data.Trains)\n          setUpdateTime(new Date().toLocaleTimeString())\n        })\n    }\n  }\n\n  function getSelectedStationDistance() {\n    if (selectedDistance > 0){\n      return(`(${selectedDistance.toFixed(2)} miles from you)`)\n    }\n  }\n\n  const handleLineClick = (lineKey) => {\n    setRenderLineMap(true)\n    console.log('this is the line key', lineKey)\n    setLineMap(lineKey)\n  }\n\n  return (\n    <div className='row fillWidth'>\n       <div>\n          <div className='row vertical_center'>\n          <div className='button largeButtonWidth spacer' onClick={handleNearestStationClick}>Get Nearest Station</div>\n          <div className='spacer'>or</div>\n          <div className='column spacer'>\n            <label className='bottom_space' htmlFor='stations'>Select Station: </label>\n          \n          \n            {stationList.length && (\n            <select name='stations' id='stationSelect' onChange={handleStationSelect}>\n              <option defaultValue='' style={{display: 'none'}} value=''></option>\n              {stationList.map((item) => {\n                return(<option key={item.Code} value={item.Code}>{item.Name}</option>)\n              })}\n            </select> )}\n          </div>\n        </div>\n\n        {showLoader ? \n          <div className='spaceLeft'>\n            <FadeLoader\n              size={50}\n              color={\"gray\"}\n              loading={loading}\n            />\n          </div>\n\n          : ''}\n\n        {selectedStationName && \n        <div >\n          \n          <div className='spaceLeft'>Trains leaving from <b>{selectedStationName}</b> {getSelectedStationDistance()} </div>\n          <div className='spaceLeft subtitle'>{(updateTime != null) ? `Last updated at ${updateTime}` : ''}</div>\n          <div className='spaceLeft subtitle'>Click on the line icon to see more details</div>\n        </div>}\n        <div>\n          {(currentTrains.length > 0) ? \n            currentTrains.map((item) => {\n              return(\n                <div className='wrapper spacer row vertical_center'>\n                  <div style={{backgroundColor: getCustomColor(item.Line)}} className='spaceRight cursor' id='lineIcon' onClick={() => handleLineClick(item.Line)}></div>\n                  <b>{item.DestinationName}</b> : {getTrainStatus(item.Min)}\n                </div>\n              )}): \n              <div className='spacer'>{(selectedStation === null) ? '' : 'No trains found'}</div>}\n        </div>\n      </div>\n      <div className='extraSpaceLeft fillParent'>\n        {renderLineMap ? <LineMap lineMap={lineMap} currentStation={selectedStation}></LineMap> : ''}\n      </div>    \n    </div>\n\n  )\n}\n\nexport default Tracker;"]},"metadata":{},"sourceType":"module"}