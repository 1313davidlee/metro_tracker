{"ast":null,"code":"var _jsxFileName = \"/Users/leed/Documents/metro_tracker/src/route.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js';\nimport axios from 'axios';\nimport App from './App.js';\nimport './App.css';\n\nconst Route = props => {\n  const [startStation, setStartStation] = useState(null);\n  const [endStation, setEndStation] = useState(null);\n  const [startStationName, setStartStationName] = useState(null);\n  const [endStationName, setEndStationName] = useState(null);\n  const [stationList, setStationList] = useState([]);\n  const [currentRoute, setCurrentRoute] = useState([]);\n  const tempCurrLoc = {\n    latitude: 37.421552399999996,\n    longitude: -122.09509510000001\n  };\n  const tempDestLoc = {\n    latitude: 37.434155239999996,\n    longitude: -122.23509510000001\n  };\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`).then(data => setStationList(data.data.Stations));\n  }, []);\n\n  function fetchRouteData(start, end) {\n    console.log('fetching route data', start, end);\n\n    if (start && end) {\n      axios.get(`${process.env.REACT_APP_ROUTE_API}/FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`).then(data => setCurrentRoute(data.data));\n    }\n\n    console.log(currentRoute);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"Where are you going?\")));\n};\n\nexport default Route;","map":{"version":3,"sources":["/Users/leed/Documents/metro_tracker/src/route.js"],"names":["React","useEffect","useState","useContext","getDistance","AppContext","axios","App","Route","props","startStation","setStartStation","endStation","setEndStation","startStationName","setStartStationName","endStationName","setEndStationName","stationList","setStationList","currentRoute","setCurrentRoute","tempCurrLoc","latitude","longitude","tempDestLoc","get","process","env","REACT_APP_RAIL_INFO_API","REACT_APP_SECRET","then","data","Stations","fetchRouteData","start","end","console","log","REACT_APP_ROUTE_API"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,EAAD,CAAhD;AAGA,QAAMoB,WAAW,GAAG;AAACC,IAAAA,QAAQ,EAAE,kBAAX;AAA+BC,IAAAA,SAAS,EAAE,CAAC;AAA3C,GAApB;AACA,QAAMC,WAAW,GAAG;AAACF,IAAAA,QAAQ,EAAE,kBAAX;AAA+BC,IAAAA,SAAS,EAAE,CAAC;AAA3C,GAApB;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AAChBK,IAAAA,KAAK,CAACoB,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,sBAAqBF,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnG,EACKC,IADL,CACWC,IAAD,IAAUb,cAAc,CAACa,IAAI,CAACA,IAAL,CAAUC,QAAX,CADlC;AAEC,GAHQ,EAGN,EAHM,CAAT;;AAMA,WAASC,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;AAEhCC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,KAAnC,EAA0CC,GAA1C;;AACA,QAAID,KAAK,IAAIC,GAAb,EAAiB;AACb9B,MAAAA,KAAK,CAACoB,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYW,mBAAoB,oBAAmBJ,KAAM,kBAAiBC,GAAI,YAAWT,OAAO,CAACC,GAAR,CAAYE,gBAAiB,EAAnI,EACKC,IADL,CACWC,IAAD,IAAUX,eAAe,CAACW,IAAI,CAACA,IAAN,CADnC;AAEH;;AAEDK,IAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAZ;AACH;;AAID,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CADJ,CADJ;AAYH,CA5CD;;AA8CA,eAAeZ,KAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { getDistance } from 'geolib';\nimport { AppContext } from './App.js'\nimport axios from 'axios';\nimport App from './App.js'\nimport './App.css';\n\nconst Route = props => {\n\n    const [startStation, setStartStation] = useState(null)\n    const [endStation, setEndStation] = useState(null)\n    const [startStationName, setStartStationName] = useState(null)\n    const [endStationName, setEndStationName] = useState(null)\n    const [stationList, setStationList] = useState([])\n    const [currentRoute, setCurrentRoute] = useState([])\n    \n\n    const tempCurrLoc = {latitude: 37.421552399999996, longitude: -122.09509510000001}\n    const tempDestLoc = {latitude: 37.434155239999996, longitude: -122.23509510000001}\n\n    useEffect(() => {\n    axios.get(`${process.env.REACT_APP_RAIL_INFO_API}/jStations?api_key=${process.env.REACT_APP_SECRET}`)\n        .then((data) => setStationList(data.data.Stations));\n    }, [])\n\n\n    function fetchRouteData(start, end) {\n        \n        console.log('fetching route data', start, end)\n        if (start && end){\n            axios.get(`${process.env.REACT_APP_ROUTE_API}/FromStationCode=${start}&ToStationCode=${end}&api_key=${process.env.REACT_APP_SECRET}`)\n                .then((data) => setCurrentRoute(data.data))\n        }\n\n        console.log(currentRoute)\n    }\n\n    \n\n    return(\n        <div>\n            <div className='column spacer'>\n                <div>Where are you going?</div>\n               \n                \n\n            </div>           \n        </div>\n\n    )\n\n}\n\nexport default Route;"]},"metadata":{},"sourceType":"module"}